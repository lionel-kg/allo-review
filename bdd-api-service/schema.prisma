datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int     @id @default(autoincrement())
  username  String
  email     String  @unique
  password  String
  idGoogle  String?
  idGithub String?
  idStripe String?
  idDiscord String?
  viewCount Int? @default(0)
  subscriptions Subscription[] 
  likes     Movie[] @relation("UserLikes")
  reviews   Review[]
  recommendations  Recommendation[]

}

model Movie {
  id             Int           @id @default(autoincrement())
  title          String
  tmdb_id         Int       @unique
  overview        String?
  original_language String?
  release_date    DateTime?
  genres         Genre[]       @relation("MovieGenres")
  reviews        Review[]
  images         String
  trailer        String?
  appreciation Appreciation? @relation(fields: [appreciationId], references: [id])
  appreciationId Int?
  likedBy        User[]        @relation("UserLikes")
  categories       Category[]   @relation("MovieCategories")
  recommendations Recommendation[] @relation("RecommendationMovies")
  @@index([title])
}

model Category {
  id       Int     @id @default(autoincrement())
  name     String
  movies   Movie[] @relation("MovieCategories")
}

model Genre {
  id     Int    @id @default(autoincrement())
  tmdb_id Int @unique
  name   String @unique
  movies   Movie[] @relation("MovieGenres")
}

model Appreciation {
  id         Int     @id @default(autoincrement())
  title      String
  min_score      Float
  max_score      Float
  min_magnitude  Float
  max_magnitude  Float
  description    String
  stars          Float?  
  movies        Movie[]
  reviews      Review[]
}

model Review {
  id             Int           @id @default(autoincrement())
  author_name    String
  content        String
  created_at      DateTime      @default(now())
  updated_at      DateTime? 
  review_score  Float?
  review_magnitude  Float?
  appreciation Appreciation @relation(fields: [appreciationId], references: [id])
  appreciationId Int
  movie          Movie        @relation(fields: [movieId], references: [id])
  movieId        Int
  author          User?         @relation(fields: [userId], references: [id])
  userId         Int?
 
}

model Code {
  id         Int       @id @default(autoincrement())
  code       String
  expiredate DateTime  @default(now())
}

model Subscription {
  id  Int   @id @default(autoincrement())
  userId  Int @unique
  idStripe  String @unique
  status  String
  createdAt DateTime  @default(now())
  expiresAt DateTime       
  updatedAt DateTime  @updatedAt
  user  User  @relation(fields: [userId], references: [id])
}


model PasswordResetToken {
  id           Int       @id @default(autoincrement())
  token        String    @unique
  email        String
  expiration   DateTime
}

model Recommendation {
  id        Int      @id @default(autoincrement())
  userId    Int
  title      String @default("Liste de suggestions")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  movies     Movie[] @relation("RecommendationMovies")
}
